/* The following code was generated by JFlex 1.4.3 on 02.04.16 20:37 */

package com.kgb.lisp.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.kgb.lisp.psi.LispTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.04.16 20:37 from the specification file
 * <tt>D:/workspace/idea-plugins/LispSupport/src/com/kgb/lisp/lisp.flex</tt>
 */
public class LispLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\1\1\1\22\0\1\1\1\37\1\10"+
    "\3\0\1\57\1\42\1\31\1\32\1\21\1\35\1\0\1\26\1\7"+
    "\1\36\12\6\1\27\1\5\1\41\1\30\1\40\2\0\1\62\1\64"+
    "\1\67\1\65\1\66\6\22\1\61\1\63\4\22\1\70\10\22\1\0"+
    "\1\11\2\0\1\23\1\0\1\17\1\54\1\47\1\45\1\15\1\16"+
    "\1\52\1\53\1\34\1\55\1\25\1\20\1\24\1\33\1\43\1\44"+
    "\1\51\1\13\1\3\1\12\1\14\1\50\1\46\1\60\1\56\1\22"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\3\10\1\11\1\10\1\12\1\10\1\13\1\1"+
    "\1\14\1\15\1\16\2\10\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\6\10\1\1\2\10\2\3\1\10\1\5"+
    "\1\0\1\25\1\0\1\10\1\26\11\10\1\0\1\10"+
    "\11\27\2\10\1\30\1\31\4\10\1\32\5\10\4\0"+
    "\10\10\1\33\1\34\3\10\1\35\1\10\10\27\1\10"+
    "\1\36\7\10\1\37\3\10\1\40\1\10\5\0\2\10"+
    "\1\41\1\7\1\42\1\43\1\44\2\10\1\45\1\46"+
    "\1\47\1\10\13\27\1\50\2\10\1\51\7\10\1\52"+
    "\1\10\1\53\1\0\1\54\1\0\1\55\1\0\2\10"+
    "\1\11\2\10\1\56\13\27\1\10\1\57\1\10\1\60"+
    "\4\10\1\61\2\10\1\62\2\0\2\10\1\63\1\64"+
    "\3\27\1\65\7\27\1\66\1\10\1\67\1\70\1\71"+
    "\2\10\1\72\2\0\1\73\1\10\11\27\1\74\2\10"+
    "\1\75\2\0\1\76\4\27\1\77\5\27\1\10\1\100"+
    "\2\0\12\27\1\101\1\0\1\102\1\103\5\27\1\104"+
    "\3\27\1\105\1\0\10\27\1\0\7\27\1\106\1\0"+
    "\1\107\1\110\4\27\1\111\1\0\4\27\1\0\2\27"+
    "\1\112\1\113\1\0\1\114\1\27\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\71\0\u0390\0\71\0\71\0\71\0\u03c9\0\u0402\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u018f\0\71\0\u0720\0\u0759\0\u0273\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0273\0\u0273\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u0273\0\u1197"+
    "\0\u11d0\0\u1209\0\71\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u0273\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u0273\0\u160b\0\u1644"+
    "\0\u167d\0\u0273\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u0273\0\u0273\0\u0273\0\u0273\0\u0273\0\u187e"+
    "\0\u18b7\0\u0273\0\u0273\0\u0273\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u0273\0\u1b9c\0\u1bd5\0\u0273\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u0273\0\u1d9d\0\u0273\0\u1dd6\0\71"+
    "\0\u1e0f\0\71\0\u1e48\0\u1e81\0\u1eba\0\u0273\0\u1ef3\0\u1f2c"+
    "\0\u0a05\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u0273\0\u2211\0\u0273"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u0273\0\u232e\0\u2367\0\71"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u0273\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u0a05\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685"+
    "\0\u26be\0\u0273\0\u26f7\0\u0273\0\u0273\0\u0273\0\u2730\0\u2769"+
    "\0\u0273\0\u27a2\0\u27db\0\u0273\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u0a05\0\u2a4e"+
    "\0\u2a87\0\u0273\0\u2ac0\0\u2af9\0\u0273\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u0a05\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u0273\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u0273\0\u3018\0\71"+
    "\0\u0a05\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u0a05\0\u316e"+
    "\0\u31a7\0\u31e0\0\u0a05\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd"+
    "\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u0a05\0\u35e2\0\u0a05\0\u0a05"+
    "\0\u361b\0\u3654\0\u368d\0\u36c6\0\u0a05\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u0a05\0\u0a05\0\u38c7"+
    "\0\u0a05\0\u3900\0\71\0\u0a05";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\14\1\16"+
    "\1\17\1\14\1\2\1\20\1\14\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\14"+
    "\1\43\4\14\1\44\1\14\1\45\3\14\1\46\3\14"+
    "\72\0\2\3\1\0\1\3\67\0\1\47\1\50\1\0"+
    "\1\14\3\0\3\14\1\51\3\14\1\0\5\14\4\0"+
    "\2\14\6\0\14\14\1\0\11\14\1\0\2\3\1\50"+
    "\1\5\64\0\2\6\1\0\66\6\6\0\1\7\1\52"+
    "\61\0\10\53\1\54\1\55\57\53\3\0\1\14\2\0"+
    "\1\14\3\0\1\14\1\56\5\14\1\0\5\14\4\0"+
    "\2\14\6\0\1\57\13\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\3\14\1\60\3\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\7\14\1\0\5\14\4\0\2\14"+
    "\6\0\1\14\1\61\12\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\7\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\1\14\1\62\3\14\1\63\1\14\1\0\5\14"+
    "\4\0\2\14\6\0\1\64\13\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\3\14\1\65\1\14\1\66"+
    "\1\14\1\0\5\14\4\0\1\14\1\67\6\0\1\70"+
    "\13\14\1\0\11\14\3\0\1\71\6\0\7\71\1\0"+
    "\1\71\1\0\2\71\5\0\2\71\6\0\14\71\1\0"+
    "\11\71\3\0\1\14\2\0\1\14\3\0\5\14\1\72"+
    "\1\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\11\14\3\0\1\73\6\0\1\74\1\75\1\73\1\76"+
    "\1\77\2\73\1\0\1\73\1\0\2\73\5\0\1\100"+
    "\1\101\6\0\1\73\1\102\2\73\1\103\7\73\1\0"+
    "\11\73\3\0\1\14\2\0\1\14\3\0\2\14\1\104"+
    "\4\14\1\0\5\14\4\0\1\14\1\105\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\4\14"+
    "\1\106\2\14\1\0\5\14\4\0\1\107\1\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\11\14\1\110"+
    "\2\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\1\14\1\111\1\112\4\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\3\14\1\113\3\14\1\0\5\14\4\0\2\14"+
    "\6\0\1\114\13\14\1\0\11\14\3\0\1\14\2\0"+
    "\1\14\3\0\1\14\1\115\5\14\1\0\5\14\4\0"+
    "\2\14\6\0\14\14\1\0\11\14\3\0\1\14\2\0"+
    "\1\14\3\0\5\14\1\116\1\14\1\0\5\14\4\0"+
    "\2\14\6\0\1\117\1\14\1\120\11\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\3\14\1\121\3\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\13\0\1\122\3\0\1\123\5\0\1\124\15\0\1\125"+
    "\30\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\2\14\1\126\6\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\6\14\1\127\2\14"+
    "\3\0\1\47\1\50\1\0\1\14\3\0\7\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\3\0"+
    "\2\50\67\0\1\14\2\0\1\14\3\0\1\130\6\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\6\0\1\52\62\0\2\53\1\0\66\53\3\0\1\14"+
    "\2\0\1\14\3\0\2\14\1\131\4\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\5\14\1\132\1\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\1\133\6\14\1\0\5\14\4\0"+
    "\2\14\6\0\14\14\1\0\11\14\3\0\1\14\2\0"+
    "\1\14\3\0\7\14\1\0\5\14\4\0\2\14\6\0"+
    "\1\134\13\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\6\14\1\135\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\1\14\1\136\5\14\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\1\137\6\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\7\14"+
    "\1\0\5\14\4\0\2\14\6\0\1\140\13\14\1\0"+
    "\11\14\3\0\1\141\2\0\1\14\3\0\7\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\7\14\1\0\5\14\4\0"+
    "\2\14\6\0\1\142\13\14\1\0\11\14\3\0\1\71"+
    "\2\0\1\71\3\0\7\71\1\143\5\71\4\0\2\71"+
    "\6\0\14\71\1\0\11\71\3\0\1\14\2\0\1\14"+
    "\3\0\7\14\1\0\3\14\1\144\1\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\7\73"+
    "\1\0\5\73\4\0\2\73\6\0\13\73\1\145\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\3\73\1\146"+
    "\3\73\1\0\5\73\4\0\2\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\6\73\1\147"+
    "\1\0\5\73\4\0\2\73\6\0\14\73\1\0\11\73"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\1\73\1\150\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\5\73\1\151\1\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\1\152\1\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\1\73\1\153\5\73\1\0\5\73"+
    "\4\0\2\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\2\73"+
    "\6\0\1\154\13\73\1\0\11\73\3\0\1\14\2\0"+
    "\1\14\3\0\6\14\1\155\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\6\14\1\156\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\12\14\1\157"+
    "\1\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\1\14\1\160\6\0\14\14"+
    "\1\0\11\14\3\0\1\161\2\0\1\14\3\0\7\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\4\14\1\162\2\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\6\14\1\163\1\0"+
    "\5\14\4\0\2\14\6\0\3\14\1\164\10\14\1\0"+
    "\11\14\3\0\1\14\2\0\1\14\3\0\7\14\1\0"+
    "\5\14\4\0\1\14\1\165\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\1\14\1\166\5\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\6\14\1\167\1\0"+
    "\5\14\4\0\1\170\1\14\6\0\1\14\1\171\12\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\1\14"+
    "\1\172\5\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\1\173"+
    "\6\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\11\14\15\0\1\174\67\0\1\175\3\0\1\176\65\0"+
    "\1\177\117\0\1\200\27\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\3\14\1\201\5\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\7\14\1\202\1\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\6\14\1\203"+
    "\5\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\3\14\1\204\3\14\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\2\14\1\205"+
    "\11\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\1\206\13\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\7\14"+
    "\1\0\2\14\1\207\2\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\210\2\0\1\14\3\0\7\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\2\14"+
    "\1\211\2\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\2\14\6\0\2\14\1\212\11\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\1\213\6\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\7\14\1\0\5\14\4\0"+
    "\2\14\6\0\1\14\1\214\12\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\3\14\1\215\3\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\2\73\6\0\1\73\1\216\12\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\5\73\1\217\1\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\3\73\1\220\3\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\6\73\1\221\1\0\5\73"+
    "\4\0\2\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\2\73\1\222\2\73"+
    "\4\0\2\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\1\73"+
    "\1\223\6\0\4\73\1\224\7\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\3\73\1\225\3\73\1\0"+
    "\5\73\4\0\1\73\1\226\6\0\14\73\1\0\11\73"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\1\227\1\73\6\0\1\73\1\230\12\73\1\0"+
    "\11\73\3\0\1\14\2\0\1\14\3\0\6\14\1\231"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\3\14\1\232\3\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\1\233\1\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\7\14\1\0\5\14\4\0"+
    "\2\14\6\0\10\14\1\234\3\14\1\0\11\14\3\0"+
    "\1\235\2\0\1\14\3\0\2\14\1\236\4\14\1\0"+
    "\5\14\4\0\2\14\6\0\5\14\1\237\6\14\1\0"+
    "\11\14\3\0\1\14\2\0\1\14\3\0\7\14\1\0"+
    "\5\14\4\0\1\14\1\240\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\1\241\1\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\1\242\6\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\6\14\1\243\1\0\5\14\4\0"+
    "\2\14\6\0\14\14\1\0\11\14\3\0\1\244\2\0"+
    "\1\14\3\0\7\14\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\1\14\1\245\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\4\14"+
    "\1\246\2\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\247\145\0\1\250\30\0\1\251"+
    "\126\0\1\252\24\0\1\253\61\0\1\14\2\0\1\14"+
    "\3\0\7\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\4\14\1\254\4\14\3\0\1\14\2\0\1\14"+
    "\3\0\7\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\1\14\1\255\7\14\3\0\1\14\2\0\1\14"+
    "\3\0\3\14\1\256\3\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\5\14\1\257\1\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\7\14\1\0\4\14\1\260\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\73\2\0\1\73\3\0"+
    "\3\73\1\261\3\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\7\73\1\0\5\73\4\0\2\73\6\0\2\73\1\262"+
    "\11\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\7\73\1\0\2\73\1\263\2\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\6\73\1\264\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\3\73"+
    "\1\265\3\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\1\266"+
    "\6\73\1\0\5\73\4\0\2\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\6\73\1\267"+
    "\1\0\5\73\4\0\2\73\6\0\14\73\1\0\11\73"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\2\73\6\0\2\73\1\270\11\73\1\0\11\73"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\1\271\1\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\272\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\2\73\6\0\4\73\1\273\7\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\1\73\1\274\6\0\14\73\1\0\11\73\3\0\1\14"+
    "\2\0\1\14\3\0\7\14\1\0\5\14\4\0\2\14"+
    "\6\0\4\14\1\275\7\14\1\0\11\14\3\0\1\14"+
    "\2\0\1\14\3\0\1\276\6\14\1\0\5\14\4\0"+
    "\2\14\6\0\14\14\1\0\11\14\3\0\1\14\2\0"+
    "\1\14\3\0\1\277\6\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\7\14\1\0\5\14\4\0\1\300\1\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\5\14\1\301\1\14\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\3\0\1\302\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\11\14\3\0\1\14\2\0\1\14\3\0\1\303\3\14"+
    "\1\304\2\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\3\14"+
    "\1\305\3\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\3\14"+
    "\1\306\3\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\3\0\1\14\2\0\1\14\3\0\3\14"+
    "\1\307\3\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\12\0\1\310\121\0\1\311\61\0\1\312"+
    "\37\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\5\14\1\313\3\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\2\14\6\0\14\14\1\0\2\14\1\314\6\14"+
    "\3\0\1\14\2\0\1\14\3\0\1\315\6\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\316\2\0\1\14\3\0\7\316\1\0\1\316\1\14"+
    "\2\316\1\14\4\0\2\316\6\0\14\316\1\0\11\316"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\4\73"+
    "\1\317\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\3\73\1\320\3\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\1\73\1\321"+
    "\3\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\2\73\6\0\2\73\1\322\11\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\1\73\1\323\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\2\73\1\324\4\73\1\0\5\73"+
    "\4\0\2\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\1\73"+
    "\1\325\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\1\326\6\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\1\327\6\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\7\73\1\0\4\73\1\330\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\3\73"+
    "\1\331\3\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\14\2\0\1\14\3\0\1\332"+
    "\6\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\11\14\3\0\1\14\2\0\1\14\3\0\1\14\1\333"+
    "\5\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\11\14\3\0\1\14\2\0\1\14\3\0\1\14\1\334"+
    "\5\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\11\14\3\0\1\14\2\0\1\14\3\0\1\335\6\14"+
    "\1\0\5\14\4\0\2\14\6\0\14\14\1\0\11\14"+
    "\3\0\1\14\2\0\1\14\3\0\7\14\1\0\5\14"+
    "\4\0\2\14\6\0\1\336\13\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\1\14\1\337\5\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\7\14\1\0\5\14\4\0"+
    "\2\14\6\0\4\14\1\340\7\14\1\0\11\14\3\0"+
    "\1\14\2\0\1\14\3\0\1\14\1\341\5\14\1\0"+
    "\5\14\4\0\2\14\6\0\14\14\1\0\11\14\46\0"+
    "\1\342\65\0\1\343\30\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\2\14\1\344\6\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\14\14\1\0"+
    "\10\14\1\345\3\0\1\316\2\0\1\316\3\0\7\316"+
    "\1\0\5\316\4\0\2\316\6\0\14\316\1\0\11\316"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\2\73\6\0\1\346\13\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\1\347\1\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\2\73"+
    "\6\0\1\73\1\350\12\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\5\73\1\351\1\73\1\0\5\73"+
    "\4\0\2\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\2\73"+
    "\6\0\2\73\1\352\11\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\2\73"+
    "\6\0\4\73\1\353\7\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\4\73\1\354\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\1\73\1\355\5\73\1\0\5\73\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\7\73\1\0\5\73\4\0\1\356\1\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\1\73\1\357\5\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\14\2\0\1\14"+
    "\3\0\2\14\1\360\4\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\11\14\3\0\1\14\2\0\1\14"+
    "\3\0\7\14\1\0\5\14\4\0\2\14\6\0\1\361"+
    "\13\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\1\362\6\14\1\0\5\14\4\0\2\14\6\0\14\14"+
    "\1\0\11\14\26\0\1\363\75\0\1\364\40\0\1\14"+
    "\2\0\1\14\3\0\7\14\1\0\5\14\4\0\2\14"+
    "\6\0\14\14\1\0\6\14\1\365\2\14\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\1\366"+
    "\1\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\1\367\6\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\5\73\4\0\2\73\6\0\1\370"+
    "\13\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\6\73\1\371\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\3\73"+
    "\1\372\3\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\5\73"+
    "\1\373\1\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\4\73"+
    "\1\374\2\73\1\0\5\73\4\0\2\73\6\0\1\375"+
    "\13\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\2\73\1\376\4\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\5\73\1\377\1\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\5\14\4\0\2\14\6\0\4\14\1\u0100"+
    "\7\14\1\0\11\14\3\0\1\14\2\0\1\14\3\0"+
    "\7\14\1\0\2\14\1\u0101\2\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\43\0\1\u0102\44\0\1\u0103\54\0"+
    "\1\73\2\0\1\73\3\0\6\73\1\u0104\1\0\5\73"+
    "\4\0\2\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\4\73\1\u0105\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\7\73\1\0\5\73\4\0\1\73\1\u0106"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\1\73\1\u0107\2\73\1\u0108\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\1\u0109\6\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\2\73\1\u010a\4\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\5\73\4\0\2\73\6\0\11\73"+
    "\1\u010b\2\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\5\73\4\0\2\73\6\0\4\73"+
    "\1\u010c\7\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\2\73\1\u010d\2\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\14\2\0\1\14"+
    "\3\0\1\u010e\6\14\1\0\5\14\4\0\2\14\6\0"+
    "\14\14\1\0\11\14\12\0\1\u010f\76\0\1\u0110\53\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\2\73\6\0\13\73\1\u0111\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\1\u0112\6\73\1\0\5\73\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\7\73\1\0\5\73\4\0\1\u0113\1\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\3\73\1\u0114\3\73\1\0\5\73\4\0\2\73"+
    "\6\0\4\73\1\u0115\7\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\2\73"+
    "\6\0\1\u0116\13\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\3\73\1\u0117\3\73\1\0\5\73\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\7\73\1\0\5\73\4\0\1\u0118\1\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\7\73\1\0\5\73\4\0\2\73\6\0\12\73"+
    "\1\u0119\1\73\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\1\u011a\6\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\3\73\1\u011b\3\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\53\0\1\u011c\20\0\1\73\2\0"+
    "\1\73\3\0\7\73\1\0\5\73\4\0\2\73\6\0"+
    "\13\73\1\u011d\1\0\11\73\3\0\1\73\2\0\1\73"+
    "\3\0\1\u011e\6\73\1\0\5\73\4\0\2\73\6\0"+
    "\14\73\1\0\11\73\3\0\1\73\2\0\1\73\3\0"+
    "\6\73\1\u011f\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\7\73"+
    "\1\0\5\73\4\0\2\73\6\0\1\u0120\13\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\4\73\1\u0121"+
    "\2\73\1\0\5\73\4\0\2\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\7\73\1\0"+
    "\5\73\4\0\2\73\6\0\4\73\1\u0122\7\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\3\73\1\u0123"+
    "\3\73\1\0\5\73\4\0\2\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\7\73\1\0"+
    "\5\73\4\0\2\73\6\0\1\u0124\13\73\1\0\11\73"+
    "\13\0\1\u0125\60\0\1\73\2\0\1\73\3\0\7\73"+
    "\1\0\5\73\4\0\2\73\6\0\1\73\1\u0126\12\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\3\73"+
    "\1\u0127\3\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\3\73"+
    "\1\u0128\3\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\7\73"+
    "\1\0\5\73\4\0\1\u0129\1\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\4\73\1\u012a"+
    "\2\73\1\0\5\73\4\0\2\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\73\2\0\1\73\3\0\1\u012b\6\73"+
    "\1\0\5\73\4\0\2\73\6\0\14\73\1\0\11\73"+
    "\3\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\2\73\6\0\4\73\1\u012c\7\73\1\0\11\73"+
    "\3\0\1\73\2\0\1\73\3\0\1\73\1\u012d\5\73"+
    "\1\0\5\73\4\0\2\73\6\0\14\73\1\0\11\73"+
    "\26\0\1\u012e\45\0\1\73\2\0\1\73\3\0\3\73"+
    "\1\u012f\3\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\1\73"+
    "\1\u0130\5\73\1\0\5\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\7\73"+
    "\1\0\2\73\1\u0131\2\73\4\0\2\73\6\0\14\73"+
    "\1\0\11\73\3\0\1\73\2\0\1\73\3\0\1\u0132"+
    "\6\73\1\0\5\73\4\0\2\73\6\0\14\73\1\0"+
    "\11\73\3\0\1\u0133\2\0\1\73\3\0\7\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\1\73\1\u0134\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\1\u0135\6\73\1\0\5\73\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\25\0\1\u0136\46\0"+
    "\1\73\2\0\1\73\3\0\3\73\1\u0137\3\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\3\73\1\u0138\3\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\3\73\1\u0139\3\73\1\0"+
    "\5\73\4\0\2\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\2\73\6\0\1\u013a\13\73\1\0\11\73\15\0\1\u013b"+
    "\56\0\1\73\2\0\1\73\3\0\7\73\1\0\5\73"+
    "\4\0\1\u013c\1\73\6\0\14\73\1\0\11\73\3\0"+
    "\1\73\2\0\1\73\3\0\7\73\1\0\5\73\4\0"+
    "\1\u013d\1\73\6\0\14\73\1\0\11\73\3\0\1\73"+
    "\2\0\1\73\3\0\1\u013e\6\73\1\0\5\73\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\7\73\1\0\5\73\4\0\1\u013f\1\73"+
    "\6\0\14\73\1\0\11\73\56\0\1\u0140\15\0\1\73"+
    "\2\0\1\73\3\0\1\u0141\6\73\1\0\5\73\4\0"+
    "\2\73\6\0\14\73\1\0\11\73\3\0\1\73\2\0"+
    "\1\73\3\0\1\u0142\6\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73\3\0\1\u0143\70\0\1\u0144"+
    "\2\0\1\73\3\0\7\73\1\0\5\73\4\0\2\73"+
    "\6\0\14\73\1\0\11\73";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14649];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\1\11\1\1\3\11\2\1\6\11"+
    "\15\1\1\0\1\11\1\0\13\1\1\0\30\1\4\0"+
    "\15\1\1\11\30\1\5\0\46\1\1\0\1\11\1\0"+
    "\1\11\1\0\34\1\1\11\2\0\27\1\2\0\17\1"+
    "\2\0\15\1\2\0\13\1\1\0\1\11\13\1\1\0"+
    "\10\1\1\0\10\1\1\0\7\1\1\0\4\1\1\0"+
    "\4\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public LispLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LispLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return SPACE;
          }
        case 79: break;
        case 71: 
          { return ELEMENT_TYPE_KEY;
          }
        case 80: break;
        case 33: 
          { return SETQ;
          }
        case 81: break;
        case 22: 
          { return TO;
          }
        case 82: break;
        case 28: 
          { return LET;
          }
        case 83: break;
        case 65: 
          { return DEFSTRUCT;
          }
        case 84: break;
        case 43: 
          { return GETF;
          }
        case 85: break;
        case 68: 
          { return PREDICATE_KEY;
          }
        case 86: break;
        case 7: 
          { return TRUE;
          }
        case 87: break;
        case 18: 
          { return OP_6;
          }
        case 88: break;
        case 13: 
          { return LP;
          }
        case 89: break;
        case 74: 
          { return INITIAL_OFFSET_KEY;
          }
        case 90: break;
        case 5: 
          { return NUMBER;
          }
        case 91: break;
        case 63: 
          { return INCLUDE_KEY;
          }
        case 92: break;
        case 64: 
          { return DOWNFROM;
          }
        case 93: break;
        case 59: 
          { return LAMBDA;
          }
        case 94: break;
        case 6: 
          { return QV2;
          }
        case 95: break;
        case 32: 
          { return CDR;
          }
        case 96: break;
        case 42: 
          { return CONS;
          }
        case 97: break;
        case 12: 
          { return EQ;
          }
        case 98: break;
        case 67: 
          { return READ_ONLY_KEY;
          }
        case 99: break;
        case 77: 
          { return LIST_KEYWORDS_5;
          }
        case 100: break;
        case 35: 
          { return UPTO;
          }
        case 101: break;
        case 31: 
          { return CAR;
          }
        case 102: break;
        case 17: 
          { return OP_5;
          }
        case 103: break;
        case 52: 
          { return MAKE;
          }
        case 104: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 105: break;
        case 37: 
          { return LOAD;
          }
        case 106: break;
        case 55: 
          { return DEFVAR;
          }
        case 107: break;
        case 45: 
          { return LIST_KEYWORDS_4;
          }
        case 108: break;
        case 40: 
          { return IF_NULL;
          }
        case 109: break;
        case 54: 
          { return OBJECT;
          }
        case 110: break;
        case 57: 
          { return DOWNTO;
          }
        case 111: break;
        case 16: 
          { return OP_4;
          }
        case 112: break;
        case 29: 
          { return HASH_SYMBOL;
          }
        case 113: break;
        case 30: 
          { return NULL;
          }
        case 114: break;
        case 41: 
          { return PUSH;
          }
        case 115: break;
        case 60: 
          { return COPIER_KEY;
          }
        case 116: break;
        case 26: 
          { return DO;
          }
        case 117: break;
        case 25: 
          { return IN;
          }
        case 118: break;
        case 44: 
          { return LIST_KEYWORDS_3;
          }
        case 119: break;
        case 8: 
          { return SYMBOL;
          }
        case 120: break;
        case 75: 
          { return PRINT_FUNCTION_KEY;
          }
        case 121: break;
        case 4: 
          { return COMMENT;
          }
        case 122: break;
        case 72: 
          { return FILL_POINTER_KEY;
          }
        case 123: break;
        case 56: 
          { return DOLIST;
          }
        case 124: break;
        case 9: 
          { return FALSE;
          }
        case 125: break;
        case 10: 
          { return OP_3;
          }
        case 126: break;
        case 47: 
          { return PRINT;
          }
        case 127: break;
        case 36: 
          { return FROM;
          }
        case 128: break;
        case 50: 
          { return LIST_KEYWORDS_2;
          }
        case 129: break;
        case 46: 
          { return TYPE_KEY;
          }
        case 130: break;
        case 62: 
          { return DECLARE;
          }
        case 131: break;
        case 58: 
          { return COPIER;
          }
        case 132: break;
        case 78: 
          { return INITIAL_CONTENTS_KEY;
          }
        case 133: break;
        case 51: 
          { return FORMAT;
          }
        case 134: break;
        case 73: 
          { return PRINT_OBJECT_KEY;
          }
        case 135: break;
        case 11: 
          { return OP_2;
          }
        case 136: break;
        case 70: 
          { return CONSTRUCTOR_KEY;
          }
        case 137: break;
        case 76: 
          { return INITIAL_ELEMENT_KEY;
          }
        case 138: break;
        case 53: 
          { return NAMED_OPTION_KEY;
          }
        case 139: break;
        case 21: 
          { return STRING;
          }
        case 140: break;
        case 24: 
          { return IF;
          }
        case 141: break;
        case 48: 
          { return DEFUN;
          }
        case 142: break;
        case 66: 
          { return LIST_KEYWORDS_1;
          }
        case 143: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 144: break;
        case 27: 
          { return FOR;
          }
        case 145: break;
        case 69: 
          { return CONC_NAME_KEY;
          }
        case 146: break;
        case 15: 
          { return OP_1;
          }
        case 147: break;
        case 34: 
          { return READ;
          }
        case 148: break;
        case 39: 
          { return LOOP;
          }
        case 149: break;
        case 14: 
          { return RP;
          }
        case 150: break;
        case 61: 
          { return COLLECT;
          }
        case 151: break;
        case 19: 
          { return OP_7;
          }
        case 152: break;
        case 49: 
          { return WRITE;
          }
        case 153: break;
        case 23: 
          { return OBJECT_FIELD;
          }
        case 154: break;
        case 20: 
          { return QV;
          }
        case 155: break;
        case 38: 
          { return LIST;
          }
        case 156: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
