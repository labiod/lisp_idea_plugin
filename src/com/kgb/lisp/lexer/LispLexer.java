/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.kgb.lisp.lexer;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.kgb.lisp.psi.LispTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>lisp.flex</tt>
 */
public class LispLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\36\1\6\3\0\1\56\1\41\1\30\1\31\1\20\1\34\1\0\1\25"+
    "\1\5\1\35\12\4\1\26\1\3\1\40\1\27\1\37\2\0\1\61\1\63\1\66\1\64\1\65\6\21\1"+
    "\60\1\62\4\21\1\67\10\21\1\0\1\7\2\0\1\22\1\0\1\15\1\53\1\46\1\44\1\13\1\14"+
    "\1\51\1\52\1\33\1\54\1\24\1\16\1\23\1\32\1\42\1\43\1\50\1\11\1\17\1\10\1\12"+
    "\1\47\1\45\1\57\1\55\1\21\12\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1"+
    "\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\3\7"+
    "\1\10\2\7\1\11\1\7\1\12\1\1\1\13\1\14"+
    "\1\15\2\7\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\6\7\1\1\2\7\1\24\1\4\1\0\1\25\1\0"+
    "\1\7\1\26\11\7\1\0\1\7\11\27\2\7\1\30"+
    "\1\31\4\7\1\32\5\7\4\0\7\7\1\33\1\34"+
    "\4\7\1\35\1\7\10\27\1\7\1\36\7\7\1\37"+
    "\3\7\1\40\1\7\5\0\2\7\1\6\1\41\1\42"+
    "\1\43\2\7\1\44\1\45\1\46\1\47\1\7\13\27"+
    "\1\50\2\7\1\51\7\7\1\52\1\7\1\53\1\0"+
    "\1\54\1\0\1\55\1\0\2\7\1\10\2\7\1\56"+
    "\13\27\1\7\1\57\1\60\5\7\1\61\2\7\1\62"+
    "\2\0\2\7\1\63\1\64\3\27\1\65\7\27\1\66"+
    "\1\7\1\67\1\70\1\71\2\7\1\72\2\0\1\73"+
    "\1\7\11\27\1\74\2\7\1\75\2\0\1\76\4\27"+
    "\1\77\5\27\1\7\1\100\2\0\12\27\1\101\1\0"+
    "\1\102\1\103\5\27\1\104\3\27\1\105\1\0\10\27"+
    "\1\0\7\27\1\106\1\0\1\107\1\110\4\27\1\111"+
    "\1\0\4\27\1\0\2\27\1\112\1\113\1\0\1\114"+
    "\1\27\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\70"+
    "\0\u0348\0\70\0\70\0\70\0\u0380\0\u03b8\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\160\0\u05e8\0\u0118"+
    "\0\70\0\u0620\0\u0658\0\u01f8\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u01f8\0\u01f8\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u01f8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\70"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u01f8\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u01f8\0\u14c8\0\u1500\0\u1538\0\u01f8\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u1730\0\u1768\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u01f8\0\u1a40\0\u1a78"+
    "\0\u01f8\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u01f8\0\u1c38\0\u01f8\0\u1c70\0\70\0\u1ca8\0\70\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u01f8\0\u1d88\0\u1dc0\0\u0968\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u01f8\0\u01f8\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u01f8\0\u21b0\0\u21e8\0\70\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u01f8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u0968\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u01f8\0\u2568"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u25a0\0\u25d8\0\u01f8\0\u2610\0\u2648"+
    "\0\u01f8\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u2808\0\u2840\0\u2878\0\u0968\0\u28b0\0\u28e8\0\u01f8\0\u2920"+
    "\0\u2958\0\u01f8\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u0968\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u01f8\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u01f8\0\u2e60\0\70\0\u0968\0\u2e98\0\u2ed0"+
    "\0\u2f08\0\u2f40\0\u2f78\0\u0968\0\u2fb0\0\u2fe8\0\u3020\0\u0968"+
    "\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0"+
    "\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0"+
    "\0\u33d8\0\u0968\0\u3410\0\u0968\0\u0968\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u0968\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u36b0\0\u0968\0\u0968\0\u36e8\0\u0968\0\u3720\0\70"+
    "\0\u0968";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\12\1\14\1\15\1\16"+
    "\1\12\1\2\1\17\1\12\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\2\12\1\42"+
    "\4\12\1\43\1\12\1\44\3\12\1\45\3\12\71\0"+
    "\2\46\65\0\1\4\1\0\66\4\4\0\1\5\1\47"+
    "\62\0\6\50\1\51\1\52\60\50\4\0\1\12\3\0"+
    "\1\12\1\53\6\12\1\0\5\12\4\0\2\12\6\0"+
    "\1\54\13\12\1\0\11\12\4\0\1\12\3\0\3\12"+
    "\1\55\4\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\10\12\1\0\5\12"+
    "\4\0\2\12\6\0\1\12\1\56\12\12\1\0\11\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\1\12"+
    "\1\57\3\12\1\60\2\12\1\0\5\12\4\0\2\12"+
    "\6\0\1\61\13\12\1\0\11\12\4\0\1\12\3\0"+
    "\3\12\1\62\4\12\1\0\5\12\4\0\1\12\1\63"+
    "\6\0\1\64\13\12\1\0\11\12\4\0\1\12\3\0"+
    "\3\12\1\65\4\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\10\0\10\66\1\0\1\66\1\0"+
    "\2\66\5\0\2\66\6\0\14\66\1\0\11\66\4\0"+
    "\1\12\3\0\5\12\1\67\2\12\1\0\5\12\4\0"+
    "\2\12\6\0\14\12\1\0\11\12\10\0\1\70\1\71"+
    "\1\72\1\73\1\74\3\72\1\0\1\72\1\0\2\72"+
    "\5\0\1\75\1\76\6\0\1\72\1\77\2\72\1\100"+
    "\7\72\1\0\11\72\4\0\1\12\3\0\2\12\1\101"+
    "\5\12\1\0\5\12\4\0\1\12\1\102\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\4\12\1\103\3\12"+
    "\1\0\5\12\4\0\1\104\1\12\6\0\14\12\1\0"+
    "\11\12\4\0\1\12\3\0\10\12\1\0\5\12\4\0"+
    "\2\12\6\0\11\12\1\105\2\12\1\0\11\12\4\0"+
    "\1\12\3\0\1\12\1\106\1\107\5\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\3\12\1\110\4\12\1\0\5\12\4\0\2\12"+
    "\6\0\1\111\13\12\1\0\11\12\4\0\1\12\3\0"+
    "\1\12\1\112\6\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\5\12\1\113"+
    "\2\12\1\0\5\12\4\0\2\12\6\0\1\114\1\12"+
    "\1\115\11\12\1\0\11\12\4\0\1\12\3\0\3\12"+
    "\1\116\4\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\11\0\1\117\3\0\1\120\6\0\1\121"+
    "\15\0\1\122\31\0\1\12\3\0\10\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\2\12\1\123\6\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\6\12\1\124\2\12\4\0\1\47"+
    "\63\0\1\50\1\0\66\50\4\0\1\12\3\0\2\12"+
    "\1\125\5\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\5\12\1\126\2\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\1\127\7\12\1\0\5\12\4\0"+
    "\2\12\6\0\14\12\1\0\11\12\4\0\1\12\3\0"+
    "\10\12\1\0\5\12\4\0\2\12\6\0\1\130\13\12"+
    "\1\0\11\12\4\0\1\12\3\0\6\12\1\131\1\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\1\12\1\132\6\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\1\133\7\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\7\12\1\134"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\5\12\1\135\2\12\1\0\5\12"+
    "\4\0\2\12\6\0\1\136\13\12\1\0\11\12\4\0"+
    "\1\12\3\0\1\137\7\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\66\3\0\10\66"+
    "\1\140\5\66\4\0\2\66\6\0\14\66\1\0\11\66"+
    "\4\0\1\12\3\0\10\12\1\0\3\12\1\141\1\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\72"+
    "\3\0\10\72\1\0\5\72\4\0\2\72\6\0\13\72"+
    "\1\142\1\0\11\72\4\0\1\72\3\0\3\72\1\143"+
    "\4\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\6\72\1\144\1\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\1\72\1\145\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\5\72\1\146\2\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\10\72\1\0\5\72\4\0\1\147\1\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\1\72\1\150"+
    "\6\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\2\72\6\0\1\151\13\72\1\0\11\72\4\0\1\12"+
    "\3\0\6\12\1\152\1\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\6\12"+
    "\1\153\1\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\10\12\1\0\5\12"+
    "\4\0\2\12\6\0\12\12\1\154\1\12\1\0\11\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\1\12"+
    "\1\155\6\0\14\12\1\0\11\12\4\0\1\12\3\0"+
    "\7\12\1\156\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\4\12\1\157\3\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\6\12\1\160\1\12\1\0\5\12"+
    "\4\0\2\12\6\0\3\12\1\161\10\12\1\0\11\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\1\12"+
    "\1\162\6\0\14\12\1\0\11\12\4\0\1\12\3\0"+
    "\1\12\1\163\6\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\6\12\1\164"+
    "\1\12\1\0\5\12\4\0\1\165\1\12\6\0\1\12"+
    "\1\166\12\12\1\0\11\12\4\0\1\12\3\0\1\12"+
    "\1\167\6\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\1\170\7\12\1\0"+
    "\5\12\4\0\2\12\6\0\14\12\1\0\11\12\13\0"+
    "\1\171\66\0\1\172\3\0\1\173\64\0\1\174\117\0"+
    "\1\175\30\0\1\12\3\0\10\12\1\0\5\12\4\0"+
    "\2\12\6\0\14\12\1\0\3\12\1\176\5\12\4\0"+
    "\1\12\3\0\10\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\7\12\1\177\1\12\4\0\1\12\3\0"+
    "\3\12\1\200\4\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\10\12\1\0"+
    "\5\12\4\0\2\12\6\0\2\12\1\201\11\12\1\0"+
    "\11\12\4\0\1\12\3\0\10\12\1\0\5\12\4\0"+
    "\2\12\6\0\1\202\13\12\1\0\11\12\4\0\1\12"+
    "\3\0\10\12\1\0\2\12\1\203\2\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\7\12"+
    "\1\204\1\0\5\12\4\0\2\12\6\0\14\12\1\0"+
    "\11\12\4\0\1\12\3\0\10\12\1\0\2\12\1\205"+
    "\2\12\4\0\2\12\6\0\14\12\1\0\11\12\4\0"+
    "\1\12\3\0\1\206\7\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\10\12"+
    "\1\0\5\12\4\0\2\12\6\0\2\12\1\207\11\12"+
    "\1\0\11\12\4\0\1\12\3\0\10\12\1\0\5\12"+
    "\4\0\2\12\6\0\1\12\1\210\12\12\1\0\11\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\2\12"+
    "\6\0\6\12\1\211\5\12\1\0\11\12\4\0\1\12"+
    "\3\0\3\12\1\212\4\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\72\3\0\10\72"+
    "\1\0\5\72\4\0\2\72\6\0\1\72\1\213\12\72"+
    "\1\0\11\72\4\0\1\72\3\0\5\72\1\214\2\72"+
    "\1\0\5\72\4\0\2\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\3\72\1\215\4\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\6\72\1\216\1\72\1\0\5\72\4\0\2\72"+
    "\6\0\14\72\1\0\11\72\4\0\1\72\3\0\10\72"+
    "\1\0\2\72\1\217\2\72\4\0\2\72\6\0\14\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\5\72"+
    "\4\0\1\72\1\220\6\0\4\72\1\221\7\72\1\0"+
    "\11\72\4\0\1\72\3\0\3\72\1\222\4\72\1\0"+
    "\5\72\4\0\1\72\1\223\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\10\72\1\0\5\72\4\0\1\224"+
    "\1\72\6\0\1\72\1\225\12\72\1\0\11\72\4\0"+
    "\1\12\3\0\6\12\1\226\1\12\1\0\5\12\4\0"+
    "\2\12\6\0\14\12\1\0\11\12\4\0\1\12\3\0"+
    "\3\12\1\227\4\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\10\12\1\0"+
    "\5\12\4\0\1\230\1\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\2\12"+
    "\6\0\10\12\1\231\3\12\1\0\11\12\4\0\1\12"+
    "\3\0\2\12\1\232\4\12\1\233\1\0\5\12\4\0"+
    "\2\12\6\0\5\12\1\234\6\12\1\0\11\12\4\0"+
    "\1\12\3\0\10\12\1\0\5\12\4\0\1\12\1\235"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\10\12"+
    "\1\0\5\12\4\0\1\236\1\12\6\0\14\12\1\0"+
    "\11\12\4\0\1\12\3\0\1\237\7\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\6\12\1\240\1\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\7\12"+
    "\1\241\1\0\5\12\4\0\2\12\6\0\14\12\1\0"+
    "\11\12\4\0\1\12\3\0\10\12\1\0\5\12\4\0"+
    "\1\12\1\242\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\4\12\1\243\3\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\17\0\1\244\127\0\1\245"+
    "\26\0\1\246\126\0\1\247\22\0\1\250\63\0\1\12"+
    "\3\0\10\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\4\12\1\251\4\12\4\0\1\12\3\0\10\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\1\12"+
    "\1\252\7\12\4\0\1\12\3\0\3\12\1\253\4\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\5\12\1\254\2\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\10\12\1\0\4\12\1\255\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\72\3\0\3\72\1\256"+
    "\4\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\2\72\6\0\2\72\1\257\11\72\1\0\11\72\4\0"+
    "\1\72\3\0\10\72\1\0\2\72\1\260\2\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\6\72\1\261\1\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\3\72\1\262"+
    "\4\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\1\263\7\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\6\72\1\264\1\72\1\0\5\72\4\0\2\72"+
    "\6\0\14\72\1\0\11\72\4\0\1\72\3\0\10\72"+
    "\1\0\5\72\4\0\2\72\6\0\2\72\1\265\11\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\5\72"+
    "\4\0\1\266\1\72\6\0\14\72\1\0\11\72\4\0"+
    "\1\72\3\0\7\72\1\267\1\0\5\72\4\0\2\72"+
    "\6\0\4\72\1\270\7\72\1\0\11\72\4\0\1\72"+
    "\3\0\10\72\1\0\5\72\4\0\1\72\1\271\6\0"+
    "\14\72\1\0\11\72\4\0\1\12\3\0\10\12\1\0"+
    "\5\12\4\0\2\12\6\0\4\12\1\272\7\12\1\0"+
    "\11\12\4\0\1\12\3\0\1\273\7\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\10\12\1\0\5\12\4\0\1\274\1\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\1\275\7\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\5\12\1\276\2\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\7\12\1\277\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\1\300\3\12"+
    "\1\301\3\12\1\0\5\12\4\0\2\12\6\0\14\12"+
    "\1\0\11\12\4\0\1\12\3\0\3\12\1\302\4\12"+
    "\1\0\5\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\4\0\1\12\3\0\3\12\1\303\4\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\4\0\1\12"+
    "\3\0\3\12\1\304\4\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\10\0\1\305\121\0\1\306"+
    "\60\0\1\307\40\0\1\12\3\0\10\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\5\12\1\310\3\12"+
    "\4\0\1\12\3\0\10\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\2\12\1\311\6\12\4\0\1\12"+
    "\3\0\1\312\7\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\10\313\1\0"+
    "\1\313\1\12\2\313\1\12\4\0\2\313\6\0\14\313"+
    "\1\0\11\313\4\0\1\72\3\0\10\72\1\0\4\72"+
    "\1\314\4\0\2\72\6\0\14\72\1\0\11\72\4\0"+
    "\1\72\3\0\3\72\1\315\4\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\10\72\1\0\1\72\1\316\3\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\2\72\6\0\2\72\1\317\11\72\1\0"+
    "\11\72\4\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\1\72\1\320\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\2\72\1\321\5\72\1\0\5\72\4\0\2\72"+
    "\6\0\14\72\1\0\11\72\4\0\1\72\3\0\10\72"+
    "\1\0\5\72\4\0\1\72\1\322\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\1\323\7\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\1\324\7\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\4\72\1\325\4\0\2\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\3\72\1\326\4\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\12"+
    "\3\0\1\327\7\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\4\0\1\12\3\0\1\12\1\330"+
    "\6\12\1\0\5\12\4\0\2\12\6\0\14\12\1\0"+
    "\11\12\4\0\1\12\3\0\1\12\1\331\6\12\1\0"+
    "\5\12\4\0\2\12\6\0\14\12\1\0\11\12\4\0"+
    "\1\12\3\0\1\332\7\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\10\12"+
    "\1\0\5\12\4\0\2\12\6\0\1\333\13\12\1\0"+
    "\11\12\4\0\1\12\3\0\1\12\1\334\6\12\1\0"+
    "\5\12\4\0\2\12\6\0\14\12\1\0\11\12\4\0"+
    "\1\12\3\0\10\12\1\0\5\12\4\0\2\12\6\0"+
    "\4\12\1\335\7\12\1\0\11\12\4\0\1\12\3\0"+
    "\1\12\1\336\6\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\11\12\45\0\1\337\64\0\1\340\31\0"+
    "\1\12\3\0\10\12\1\0\5\12\4\0\2\12\6\0"+
    "\14\12\1\0\2\12\1\341\6\12\4\0\1\12\3\0"+
    "\10\12\1\0\5\12\4\0\2\12\6\0\14\12\1\0"+
    "\10\12\1\342\4\0\1\313\3\0\10\313\1\0\5\313"+
    "\4\0\2\313\6\0\14\313\1\0\11\313\4\0\1\72"+
    "\3\0\10\72\1\0\5\72\4\0\2\72\6\0\1\343"+
    "\13\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\1\344\1\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\10\72\1\0\5\72\4\0\2\72"+
    "\6\0\1\72\1\345\12\72\1\0\11\72\4\0\1\72"+
    "\3\0\5\72\1\346\2\72\1\0\5\72\4\0\2\72"+
    "\6\0\14\72\1\0\11\72\4\0\1\72\3\0\10\72"+
    "\1\0\5\72\4\0\2\72\6\0\2\72\1\347\11\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\5\72"+
    "\4\0\2\72\6\0\4\72\1\350\7\72\1\0\11\72"+
    "\4\0\1\72\3\0\10\72\1\0\4\72\1\351\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\1\72\1\352\6\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\1\353\1\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\1\72\1\354\6\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\12"+
    "\3\0\2\12\1\355\5\12\1\0\5\12\4\0\2\12"+
    "\6\0\14\12\1\0\11\12\4\0\1\12\3\0\10\12"+
    "\1\0\5\12\4\0\2\12\6\0\1\356\13\12\1\0"+
    "\11\12\4\0\1\12\3\0\1\357\7\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\11\12\25\0\1\360"+
    "\74\0\1\361\41\0\1\12\3\0\10\12\1\0\5\12"+
    "\4\0\2\12\6\0\14\12\1\0\6\12\1\362\2\12"+
    "\4\0\1\72\3\0\10\72\1\0\5\72\4\0\1\363"+
    "\1\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\1\364\7\72\1\0\5\72\4\0\2\72\6\0\14\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\5\72"+
    "\4\0\2\72\6\0\1\365\13\72\1\0\11\72\4\0"+
    "\1\72\3\0\6\72\1\366\1\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\3\72\1\367\4\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\5\72\1\370"+
    "\2\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\4\72\1\371\3\72\1\0"+
    "\5\72\4\0\2\72\6\0\1\372\13\72\1\0\11\72"+
    "\4\0\1\72\3\0\2\72\1\373\5\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\5\72\1\374\2\72\1\0\5\72\4\0\2\72"+
    "\6\0\14\72\1\0\11\72\4\0\1\12\3\0\10\12"+
    "\1\0\5\12\4\0\2\12\6\0\4\12\1\375\7\12"+
    "\1\0\11\12\4\0\1\12\3\0\10\12\1\0\2\12"+
    "\1\376\2\12\4\0\2\12\6\0\14\12\1\0\11\12"+
    "\42\0\1\377\42\0\1\u0100\56\0\1\72\3\0\6\72"+
    "\1\u0101\1\72\1\0\5\72\4\0\2\72\6\0\14\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\4\72"+
    "\1\u0102\4\0\2\72\6\0\14\72\1\0\11\72\4\0"+
    "\1\72\3\0\10\72\1\0\5\72\4\0\1\72\1\u0103"+
    "\6\0\14\72\1\0\11\72\4\0\1\72\3\0\10\72"+
    "\1\0\1\72\1\u0104\2\72\1\u0105\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\1\u0106\7\72"+
    "\1\0\5\72\4\0\2\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\2\72\1\u0107\5\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\10\72\1\0\5\72\4\0\2\72\6\0\11\72"+
    "\1\u0108\2\72\1\0\11\72\4\0\1\72\3\0\10\72"+
    "\1\0\5\72\4\0\2\72\6\0\4\72\1\u0109\7\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\2\72"+
    "\1\u010a\2\72\4\0\2\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\12\3\0\1\u010b\7\12\1\0\5\12\4\0"+
    "\2\12\6\0\14\12\1\0\11\12\10\0\1\u010c\75\0"+
    "\1\u010d\55\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\2\72\6\0\13\72\1\u010e\1\0\11\72\4\0\1\72"+
    "\3\0\1\u010f\7\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\1\u0110\1\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\3\72\1\u0111\4\72\1\0\5\72"+
    "\4\0\2\72\6\0\4\72\1\u0112\7\72\1\0\11\72"+
    "\4\0\1\72\3\0\10\72\1\0\5\72\4\0\2\72"+
    "\6\0\1\u0113\13\72\1\0\11\72\4\0\1\72\3\0"+
    "\3\72\1\u0114\4\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\1\u0115\1\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\10\72\1\0\5\72\4\0\2\72"+
    "\6\0\12\72\1\u0116\1\72\1\0\11\72\4\0\1\72"+
    "\3\0\1\u0117\7\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\3\72\1\u0118"+
    "\4\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\52\0\1\u0119\21\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\2\72\6\0\13\72\1\u011a\1\0\11\72"+
    "\4\0\1\72\3\0\1\u011b\7\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\6\72\1\u011c\1\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\2\72\6\0\1\u011d\13\72\1\0\11\72"+
    "\4\0\1\72\3\0\4\72\1\u011e\3\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\10\72\1\0\5\72\4\0\2\72\6\0\4\72"+
    "\1\u011f\7\72\1\0\11\72\4\0\1\72\3\0\3\72"+
    "\1\u0120\4\72\1\0\5\72\4\0\2\72\6\0\14\72"+
    "\1\0\11\72\4\0\1\72\3\0\10\72\1\0\5\72"+
    "\4\0\2\72\6\0\1\u0121\13\72\1\0\11\72\11\0"+
    "\1\u0122\62\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\2\72\6\0\1\72\1\u0123\12\72\1\0\11\72\4\0"+
    "\1\72\3\0\3\72\1\u0124\4\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\3\72\1\u0125\4\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\1\u0126\1\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\4\72\1\u0127\3\72\1\0\5\72"+
    "\4\0\2\72\6\0\14\72\1\0\11\72\4\0\1\72"+
    "\3\0\1\u0128\7\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\2\72\6\0\4\72\1\u0129\7\72\1\0"+
    "\11\72\4\0\1\72\3\0\1\72\1\u012a\6\72\1\0"+
    "\5\72\4\0\2\72\6\0\14\72\1\0\11\72\25\0"+
    "\1\u012b\46\0\1\72\3\0\3\72\1\u012c\4\72\1\0"+
    "\5\72\4\0\2\72\6\0\14\72\1\0\11\72\4\0"+
    "\1\72\3\0\1\72\1\u012d\6\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\10\72\1\0\2\72\1\u012e\2\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\1\u012f\7\72"+
    "\1\0\5\72\4\0\2\72\6\0\14\72\1\0\11\72"+
    "\4\0\1\72\3\0\7\72\1\u0130\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\10\72\1\0\5\72\4\0\1\72\1\u0131\6\0\14\72"+
    "\1\0\11\72\4\0\1\72\3\0\1\u0132\7\72\1\0"+
    "\5\72\4\0\2\72\6\0\14\72\1\0\11\72\24\0"+
    "\1\u0133\47\0\1\72\3\0\3\72\1\u0134\4\72\1\0"+
    "\5\72\4\0\2\72\6\0\14\72\1\0\11\72\4\0"+
    "\1\72\3\0\3\72\1\u0135\4\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\3\72\1\u0136\4\72\1\0\5\72\4\0\2\72\6\0"+
    "\14\72\1\0\11\72\4\0\1\72\3\0\10\72\1\0"+
    "\5\72\4\0\2\72\6\0\1\u0137\13\72\1\0\11\72"+
    "\13\0\1\u0138\60\0\1\72\3\0\10\72\1\0\5\72"+
    "\4\0\1\u0139\1\72\6\0\14\72\1\0\11\72\4\0"+
    "\1\72\3\0\10\72\1\0\5\72\4\0\1\u013a\1\72"+
    "\6\0\14\72\1\0\11\72\4\0\1\72\3\0\1\u013b"+
    "\7\72\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72\4\0\1\72\3\0\10\72\1\0\5\72\4\0"+
    "\1\u013c\1\72\6\0\14\72\1\0\11\72\55\0\1\u013d"+
    "\16\0\1\72\3\0\1\u013e\7\72\1\0\5\72\4\0"+
    "\2\72\6\0\14\72\1\0\11\72\4\0\1\72\3\0"+
    "\1\u013f\7\72\1\0\5\72\4\0\2\72\6\0\14\72"+
    "\1\0\11\72\17\0\1\u0140\54\0\1\72\3\0\7\72"+
    "\1\u0141\1\0\5\72\4\0\2\72\6\0\14\72\1\0"+
    "\11\72";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\1\1\3\11\2\1\6\11"+
    "\13\1\1\0\1\11\1\0\13\1\1\0\30\1\4\0"+
    "\15\1\1\11\30\1\5\0\46\1\1\0\1\11\1\0"+
    "\1\11\1\0\34\1\1\11\2\0\27\1\2\0\17\1"+
    "\2\0\15\1\2\0\13\1\1\0\1\11\13\1\1\0"+
    "\10\1\1\0\10\1\1\0\7\1\1\0\4\1\1\0"+
    "\4\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public LispLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LispLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 79: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 80: break;
          case 3: 
            { return COMMENT;
            }
          case 81: break;
          case 4: 
            { return NUMBER;
            }
          case 82: break;
          case 5: 
            { return QV2;
            }
          case 83: break;
          case 6: 
            { return TRUE;
            }
          case 84: break;
          case 7: 
            { return SYMBOL;
            }
          case 85: break;
          case 8: 
            { return FALSE;
            }
          case 86: break;
          case 9: 
            { return OP_3;
            }
          case 87: break;
          case 10: 
            { return OP_2;
            }
          case 88: break;
          case 11: 
            { return EQ;
            }
          case 89: break;
          case 12: 
            { return LP;
            }
          case 90: break;
          case 13: 
            { return RP;
            }
          case 91: break;
          case 14: 
            { return OP_1;
            }
          case 92: break;
          case 15: 
            { return OP_4;
            }
          case 93: break;
          case 16: 
            { return OP_5;
            }
          case 94: break;
          case 17: 
            { return OP_6;
            }
          case 95: break;
          case 18: 
            { return OP_7;
            }
          case 96: break;
          case 19: 
            { return QV;
            }
          case 97: break;
          case 20: 
            { return SPACE;
            }
          case 98: break;
          case 21: 
            { return STRING;
            }
          case 99: break;
          case 22: 
            { return TO;
            }
          case 100: break;
          case 23: 
            { return OBJECT_FIELD;
            }
          case 101: break;
          case 24: 
            { return IF;
            }
          case 102: break;
          case 25: 
            { return IN;
            }
          case 103: break;
          case 26: 
            { return DO;
            }
          case 104: break;
          case 27: 
            { return FOR;
            }
          case 105: break;
          case 28: 
            { return LET;
            }
          case 106: break;
          case 29: 
            { return HASH_SYMBOL;
            }
          case 107: break;
          case 30: 
            { return NULL;
            }
          case 108: break;
          case 31: 
            { return CAR;
            }
          case 109: break;
          case 32: 
            { return CDR;
            }
          case 110: break;
          case 33: 
            { return READ;
            }
          case 111: break;
          case 34: 
            { return UPTO;
            }
          case 112: break;
          case 35: 
            { return FROM;
            }
          case 113: break;
          case 36: 
            { return LIST;
            }
          case 114: break;
          case 37: 
            { return LOAD;
            }
          case 115: break;
          case 38: 
            { return LOOP;
            }
          case 116: break;
          case 39: 
            { return SETQ;
            }
          case 117: break;
          case 40: 
            { return IF_NULL;
            }
          case 118: break;
          case 41: 
            { return PUSH;
            }
          case 119: break;
          case 42: 
            { return CONS;
            }
          case 120: break;
          case 43: 
            { return GETF;
            }
          case 121: break;
          case 44: 
            { return LIST_KEYWORDS_3;
            }
          case 122: break;
          case 45: 
            { return LIST_KEYWORDS_4;
            }
          case 123: break;
          case 46: 
            { return TYPE_KEY;
            }
          case 124: break;
          case 47: 
            { return PRINT;
            }
          case 125: break;
          case 48: 
            { return DEFUN;
            }
          case 126: break;
          case 49: 
            { return WRITE;
            }
          case 127: break;
          case 50: 
            { return LIST_KEYWORDS_2;
            }
          case 128: break;
          case 51: 
            { return FORMAT;
            }
          case 129: break;
          case 52: 
            { return MAKE;
            }
          case 130: break;
          case 53: 
            { return NAMED_OPTION_KEY;
            }
          case 131: break;
          case 54: 
            { return OBJECT;
            }
          case 132: break;
          case 55: 
            { return DEFVAR;
            }
          case 133: break;
          case 56: 
            { return DOLIST;
            }
          case 134: break;
          case 57: 
            { return DOWNTO;
            }
          case 135: break;
          case 58: 
            { return COPIER;
            }
          case 136: break;
          case 59: 
            { return LAMBDA;
            }
          case 137: break;
          case 60: 
            { return COPIER_KEY;
            }
          case 138: break;
          case 61: 
            { return COLLECT;
            }
          case 139: break;
          case 62: 
            { return DECLARE;
            }
          case 140: break;
          case 63: 
            { return INCLUDE_KEY;
            }
          case 141: break;
          case 64: 
            { return DOWNFROM;
            }
          case 142: break;
          case 65: 
            { return DEFSTRUCT;
            }
          case 143: break;
          case 66: 
            { return LIST_KEYWORDS_1;
            }
          case 144: break;
          case 67: 
            { return READ_ONLY_KEY;
            }
          case 145: break;
          case 68: 
            { return PREDICATE_KEY;
            }
          case 146: break;
          case 69: 
            { return CONC_NAME_KEY;
            }
          case 147: break;
          case 70: 
            { return CONSTRUCTOR_KEY;
            }
          case 148: break;
          case 71: 
            { return ELEMENT_TYPE_KEY;
            }
          case 149: break;
          case 72: 
            { return FILL_POINTER_KEY;
            }
          case 150: break;
          case 73: 
            { return PRINT_OBJECT_KEY;
            }
          case 151: break;
          case 74: 
            { return INITIAL_OFFSET_KEY;
            }
          case 152: break;
          case 75: 
            { return PRINT_FUNCTION_KEY;
            }
          case 153: break;
          case 76: 
            { return INITIAL_ELEMENT_KEY;
            }
          case 154: break;
          case 77: 
            { return LIST_KEYWORDS_5;
            }
          case 155: break;
          case 78: 
            { return INITIAL_CONTENTS_KEY;
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
